- mkdir -p tb3_ws/src -> crear workspace tb3_ws
- ros2 pkg create --build-type ament_cmake robot robot_trajectory -> crear paquete robot_trajectory
- colcon build -> compilar

- ros2 topic echo /scan(nombre_del_topic) --no-arr -> muestra por pantalla lo que hace el topic

- ros2 launch turtlebot3_gazebo empty_world.launch.py -> gazebo

- export WEBOTS_HOME=~/webots-R2022b -> define la versión de webots como la R2022b
- ros2 launch webots_ros2_turtlebot robot_launch.py -> webots

- ros2 run turtlesim turtlesim_node -> abrir turtlesim

- rviz2 -d tb3.rviz -> abrir rviz con la configuración de tb3.rviz

- ros2 run robot_trajectory square_odom --ros-args --param linear_speed:=0.4 --param angular_speed:=0.4 --param square_length:=2.0

- ros2 run robot_trajectory square --ros-args --remap /cmd_vel:=/turtle1/cmd_vel --param linear_speed:=0.5 --param angular_speed:=1.2  --param square_length:=1.5 -> abrir turtlesim con params

- ros2 topic pub --once /<topic_name> <msg_type> ‘<args>’ -> Publica un mensaje con unos argumentos en un topic. Poner “--once” para que solo se publique una vez1
- ros2 topic pub --once /cmd_vel geometry_msgs/msg/Twist \
"{linear: {x: 0.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 0.0}}" -> ejempllo

- ros2 node list (te dice los nodos que están activos) -> /publisher /subscriber
- ros2 node info (publishers, subscribers,services,actions)
- ros2 topic list (topics activos) /parameter_events /rosout /topic
- ros2 topic info /topic (el tipo de mensaje activo, contador de publisher y subscriber, service servers y clients, action servers y clients)
- ros2 run robot_trajectory square --ros-args --remap /cmd_vel:=/turtle1/cmd_vel (rename topic at runtime)
- ros2 param get /turtlesim background_b (devuelve valores de los parámetros)
- ros2 param set <node_name> <parameter_name> value (cambia los valores de los parámetros at runtime)
- ros2 run obstacles detector --ros-args -r __ns:=/left --param obs_angle_min:=0.3927 (ejecuta el detector izquierdo)
- ros2 param list (te dice el nodo ejecutado y dentro de ese, los parámetros, ej: /ftont/detector:obs_angle_max,min...)
- ros2 interface show turtlesim/action/RotateAbsolute -> float32 delta: the result, float32 theta: the goal request, float32 remaining: the feedback
- ros2 action info /turtle1/rotate_absolute (devuelve la action, action client y server)
- ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute "{theta: -1.57}" --feedback (see the feedback of this goal)

- ros2 run tf2_tools view_frames (recorded time,broadcaster,average rate,buffer length,most recent transform, oldest transform)
- ros2 run tf2_ros tf2_echo [reference_frame] [target_frame] (tf2_echo reports the transform 
between any two frames broadcasted over ROS)
- rosdep install -i --from-path src --rosdistro foxy -y (check for missing dependencies)
- ros2 service call /spawn turtlesim/srv/Spawn "{x: 2.0, y: 2.0, theta: 0.0, name: 'turtle2'}" (Spawn a second turtle)

Write the command for sending an action goal for rotating the turtle towards a desired heading of 90 ->
rost action [send_goal] /turtle1/[rutate_sbsolute) turtlesin/action/[RotateAbsolute) "(theta: [(1.57])"

To start the same node using some saved parameter values, we use -> 
ros2 run [<package name>] [<executable name>] [--ros-args) [--params-file] [<file_name>]

To see the request and response arguments of the /spawn service, run the command ros2 interface show turtlesim/srv/Spawn Which return: float32 x,y,theta, string name -> 
Which are the response arguments? name
Which are the request arguments? x, y, theta, name

You can save all of a node's current parameter values into a file to save them for later by using the command ->
ros2 param dump <node_name>

LAUNCH: return(Node(package,executable,remappings,parameters))

